#+TITLE: 第一章 JavaScript 基础

* 第一章 JavaScript 基础

** JavaScript 脚本

   Node 是 JavaScript 的运行时，因此它可以运行 JavaScript 脚本。

   JavaScript 脚本以 =.js= 结尾，除此之外， Node 还支持以 =.mjs= 结尾的脚本。 Node 本身是不支持 TS 、 Vue 、 JSX 等扩展语言的。

   #+BEGIN_QUOTE
   对于一些初学者来说，可能理不清楚 Node 与 TS 、 Vue 、 JSX 等的关系，简单来说，我们是基于 Node 再构建了一个编译器，用这个编译器将 TS 等编译成 JavaScript 。当然，至于这些 JavaScript 能否运行于 Node 之上是另一回事了。从中我们管窥到一点，构筑现代前端的一大基础技术原理，就是编译原理。不管你愿不愿意，还是要学的。
   #+END_QUOTE

   JavaScript 是一门历史负担挺重的语言，我们尽量摒弃一些不良的实践，教授一个干净、现代的 JavaScript 。

** JavaScript 基本数据类型

   JavaScript 是一门弱类型语言，且目前也没有类型标注。弱类型一方面提供给 JavaScript 以极大的自由，但另一方面，在工程扩大化之后， JavaScript 过于灵活的特性不利于 API 使用的约束。面对这个问题，我们可以选择使用 TypeScript 进行编译器约束，或者借助 JsDoc 等工具，并加上良好的编程习惯来做约束。

   JavaScript 的基本数据类型主要有 string 、 number 、 boolean 、 object 、 null 、 undefined 等，你可能还听说过 bigint 和 symbol ，这两个也是基本类型，不过一些老版本的 Node 会不支持，但最新版都支持了。

*** 数字类型

    对于基础类型，我们可以通过 =typeof= 操作符获取值的具体类型。例如， =typeof 1= 获得的就是 ='number'= 。

    JavaScript 标准不区分浮点数和整数，但 V8 引擎还是会区分的，因此整数还是可以放心用的。 JavaScript 的数字范围我们可以通过 =Number.MAX_VALUE= 和 =Number.MIN_VALUE= 查看。

    JavaScript 中出了正常的数字之外，还有两个特殊数字，一个是 =NaN= ，另一个是 =Infinity= 。任何数除以 =0= 得到 =Infinity= ，且区分正负。 =NaN= 意为不是 number ，任意两个 =Infinity= 之间进行计算可得 =NaN= ，又或者一个强制类型转换失败的数也是 =NaN= 。

    =NaN= 是一个逃避不了的坑。 =NaN= 与任何数都不相等，包括它自己，检测 =NaN= 的方法一般是使用 =isNaN= 。

*** 字符串类型

    字符串类型是我们经常打交道的类型，我们常常处理它，然后又将它转换为其他各种类型。

    在 JavaScript 中，只有字符串类型，没有字符类型。
